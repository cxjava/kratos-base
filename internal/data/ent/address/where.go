// Code generated by ent, DO NOT EDIT.

package address

import (
	"kratos-base/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldID, id))
}

// Street applies equality check predicate on the "street" field. It's identical to StreetEQ.
func Street(v int32) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreet, v))
}

// JoinTime applies equality check predicate on the "joinTime" field. It's identical to JoinTimeEQ.
func JoinTime(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldJoinTime, v))
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldHost, v))
}

// StreetEQ applies the EQ predicate on the "street" field.
func StreetEQ(v int32) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreet, v))
}

// StreetNEQ applies the NEQ predicate on the "street" field.
func StreetNEQ(v int32) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldStreet, v))
}

// StreetIn applies the In predicate on the "street" field.
func StreetIn(vs ...int32) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldStreet, vs...))
}

// StreetNotIn applies the NotIn predicate on the "street" field.
func StreetNotIn(vs ...int32) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldStreet, vs...))
}

// StreetGT applies the GT predicate on the "street" field.
func StreetGT(v int32) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldStreet, v))
}

// StreetGTE applies the GTE predicate on the "street" field.
func StreetGTE(v int32) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldStreet, v))
}

// StreetLT applies the LT predicate on the "street" field.
func StreetLT(v int32) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldStreet, v))
}

// StreetLTE applies the LTE predicate on the "street" field.
func StreetLTE(v int32) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldStreet, v))
}

// JoinTimeEQ applies the EQ predicate on the "joinTime" field.
func JoinTimeEQ(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldJoinTime, v))
}

// JoinTimeNEQ applies the NEQ predicate on the "joinTime" field.
func JoinTimeNEQ(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldJoinTime, v))
}

// JoinTimeIn applies the In predicate on the "joinTime" field.
func JoinTimeIn(vs ...time.Time) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldJoinTime, vs...))
}

// JoinTimeNotIn applies the NotIn predicate on the "joinTime" field.
func JoinTimeNotIn(vs ...time.Time) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldJoinTime, vs...))
}

// JoinTimeGT applies the GT predicate on the "joinTime" field.
func JoinTimeGT(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldJoinTime, v))
}

// JoinTimeGTE applies the GTE predicate on the "joinTime" field.
func JoinTimeGTE(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldJoinTime, v))
}

// JoinTimeLT applies the LT predicate on the "joinTime" field.
func JoinTimeLT(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldJoinTime, v))
}

// JoinTimeLTE applies the LTE predicate on the "joinTime" field.
func JoinTimeLTE(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldJoinTime, v))
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldHost, v))
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldHost, v))
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldHost, vs...))
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldHost, vs...))
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldHost, v))
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldHost, v))
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldHost, v))
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldHost, v))
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldHost, v))
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldHost, v))
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldHost, v))
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldHost, v))
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldHost, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		p(s.Not())
	})
}
