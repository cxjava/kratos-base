// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDataMultiError, or nil
// if none found.
func (m *UserData) ValidateAll() error {
	return m.validate(true)
}

func (m *UserData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetAge() >= 50 {
		err := UserDataValidationError{
			field:  "Age",
			reason: "value must be less than 50",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) != 5 {
		err := UserDataValidationError{
			field:  "Name",
			reason: "value length must be 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return UserDataMultiError(errors)
	}

	return nil
}

// UserDataMultiError is an error wrapping multiple validation errors returned
// by UserData.ValidateAll() if the designated constraints aren't met.
type UserDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDataMultiError) AllErrors() []error { return m }

// UserDataValidationError is the validation error returned by
// UserData.Validate if the designated constraints aren't met.
type UserDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDataValidationError) ErrorName() string { return "UserDataValidationError" }

// Error satisfies the builtin error interface
func (e UserDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDataValidationError{}

// Validate checks the field values on UserReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserReqMultiError, or nil if none found.
func (m *UserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Age

	// no validation rules for Name

	if len(errors) > 0 {
		return UserReqMultiError(errors)
	}

	return nil
}

// UserReqMultiError is an error wrapping multiple validation errors returned
// by UserReq.ValidateAll() if the designated constraints aren't met.
type UserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserReqMultiError) AllErrors() []error { return m }

// UserReqValidationError is the validation error returned by UserReq.Validate
// if the designated constraints aren't met.
type UserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserReqValidationError) ErrorName() string { return "UserReqValidationError" }

// Error satisfies the builtin error interface
func (e UserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserReqValidationError{}

// Validate checks the field values on UserReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserReplyMultiError, or nil
// if none found.
func (m *UserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserReplyValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserReplyMultiError(errors)
	}

	return nil
}

// UserReplyMultiError is an error wrapping multiple validation errors returned
// by UserReply.ValidateAll() if the designated constraints aren't met.
type UserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserReplyMultiError) AllErrors() []error { return m }

// UserReplyValidationError is the validation error returned by
// UserReply.Validate if the designated constraints aren't met.
type UserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserReplyValidationError) ErrorName() string { return "UserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserReplyValidationError{}

// Validate checks the field values on UserCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserCreateReqMultiError, or
// nil if none found.
func (m *UserCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetAge() >= 50 {
		err := UserCreateReqValidationError{
			field:  "Age",
			reason: "value must be less than 50",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) != 5 {
		err := UserCreateReqValidationError{
			field:  "Name",
			reason: "value length must be 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return UserCreateReqMultiError(errors)
	}

	return nil
}

// UserCreateReqMultiError is an error wrapping multiple validation errors
// returned by UserCreateReq.ValidateAll() if the designated constraints
// aren't met.
type UserCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateReqMultiError) AllErrors() []error { return m }

// UserCreateReqValidationError is the validation error returned by
// UserCreateReq.Validate if the designated constraints aren't met.
type UserCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateReqValidationError) ErrorName() string { return "UserCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e UserCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateReqValidationError{}

// Validate checks the field values on UserCreateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserCreateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreateReplyMultiError, or nil if none found.
func (m *UserCreateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserCreateReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserCreateReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserCreateReplyValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserCreateReplyMultiError(errors)
	}

	return nil
}

// UserCreateReplyMultiError is an error wrapping multiple validation errors
// returned by UserCreateReply.ValidateAll() if the designated constraints
// aren't met.
type UserCreateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateReplyMultiError) AllErrors() []error { return m }

// UserCreateReplyValidationError is the validation error returned by
// UserCreateReply.Validate if the designated constraints aren't met.
type UserCreateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateReplyValidationError) ErrorName() string { return "UserCreateReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserCreateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateReplyValidationError{}

// Validate checks the field values on UserUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUpdateReqMultiError, or
// nil if none found.
func (m *UserUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Age

	// no validation rules for Name

	if len(errors) > 0 {
		return UserUpdateReqMultiError(errors)
	}

	return nil
}

// UserUpdateReqMultiError is an error wrapping multiple validation errors
// returned by UserUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateReqMultiError) AllErrors() []error { return m }

// UserUpdateReqValidationError is the validation error returned by
// UserUpdateReq.Validate if the designated constraints aren't met.
type UserUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateReqValidationError) ErrorName() string { return "UserUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateReqValidationError{}

// Validate checks the field values on UserUpdateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateReplyMultiError, or nil if none found.
func (m *UserUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUpdateReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUpdateReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateReplyValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserUpdateReplyMultiError(errors)
	}

	return nil
}

// UserUpdateReplyMultiError is an error wrapping multiple validation errors
// returned by UserUpdateReply.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateReplyMultiError) AllErrors() []error { return m }

// UserUpdateReplyValidationError is the validation error returned by
// UserUpdateReply.Validate if the designated constraints aren't met.
type UserUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateReplyValidationError) ErrorName() string { return "UserUpdateReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateReplyValidationError{}
