// Code generated by ent, DO NOT EDIT.

package ent

import (
	"kratos-base/app/user/service/internal/data/ent/address"
	"kratos-base/app/user/service/internal/data/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   address.Table,
			Columns: address.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: address.FieldID,
			},
		},
		Type: "Address",
		Fields: map[string]*sqlgraph.FieldSpec{
			address.FieldStreet:   {Type: field.TypeInt32, Column: address.FieldStreet},
			address.FieldJoinTime: {Type: field.TypeTime, Column: address.FieldJoinTime},
			address.FieldHost:     {Type: field.TypeString, Column: address.FieldHost},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldAge:  {Type: field.TypeInt32, Column: user.FieldAge},
			user.FieldName: {Type: field.TypeString, Column: user.FieldName},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AddressQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AddressQuery builder.
func (aq *AddressQuery) Filter() *AddressFilter {
	return &AddressFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AddressMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AddressMutation builder.
func (m *AddressMutation) Filter() *AddressFilter {
	return &AddressFilter{config: m.config, predicateAdder: m}
}

// AddressFilter provides a generic filtering capability at runtime for AddressQuery.
type AddressFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AddressFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *AddressFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(address.FieldID))
}

// WhereStreet applies the entql int32 predicate on the street field.
func (f *AddressFilter) WhereStreet(p entql.Int32P) {
	f.Where(p.Field(address.FieldStreet))
}

// WhereJoinTime applies the entql time.Time predicate on the joinTime field.
func (f *AddressFilter) WhereJoinTime(p entql.TimeP) {
	f.Where(p.Field(address.FieldJoinTime))
}

// WhereHost applies the entql string predicate on the host field.
func (f *AddressFilter) WhereHost(p entql.StringP) {
	f.Where(p.Field(address.FieldHost))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(user.FieldID))
}

// WhereAge applies the entql int32 predicate on the age field.
func (f *UserFilter) WhereAge(p entql.Int32P) {
	f.Where(p.Field(user.FieldAge))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}
