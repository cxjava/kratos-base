// Code generated by MockGen. DO NOT EDIT.
// Source: kratos-base/api/catalog/service/v1 (interfaces: CatalogClient)

// Package mcatalog is a generated GoMock package.
package mcatalog

import (
	context "context"
	v1 "kratos-base/api/catalog/service/v1"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCatalogClient is a mock of CatalogClient interface.
type MockCatalogClient struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogClientMockRecorder
}

// MockCatalogClientMockRecorder is the mock recorder for MockCatalogClient.
type MockCatalogClientMockRecorder struct {
	mock *MockCatalogClient
}

// NewMockCatalogClient creates a new mock instance.
func NewMockCatalogClient(ctrl *gomock.Controller) *MockCatalogClient {
	mock := &MockCatalogClient{ctrl: ctrl}
	mock.recorder = &MockCatalogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCatalogClient) EXPECT() *MockCatalogClientMockRecorder {
	return m.recorder
}

// CreateBeer mocks base method.
func (m *MockCatalogClient) CreateBeer(arg0 context.Context, arg1 *v1.CreateBeerReq, arg2 ...grpc.CallOption) (*v1.CreateBeerReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBeer", varargs...)
	ret0, _ := ret[0].(*v1.CreateBeerReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBeer indicates an expected call of CreateBeer.
func (mr *MockCatalogClientMockRecorder) CreateBeer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBeer", reflect.TypeOf((*MockCatalogClient)(nil).CreateBeer), varargs...)
}

// GetBeer mocks base method.
func (m *MockCatalogClient) GetBeer(arg0 context.Context, arg1 *v1.GetBeerReq, arg2 ...grpc.CallOption) (*v1.GetBeerReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBeer", varargs...)
	ret0, _ := ret[0].(*v1.GetBeerReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeer indicates an expected call of GetBeer.
func (mr *MockCatalogClientMockRecorder) GetBeer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeer", reflect.TypeOf((*MockCatalogClient)(nil).GetBeer), varargs...)
}
