// Code generated by MockGen. DO NOT EDIT.
// Source: kratos-base/app/catalog/service/internal/biz (interfaces: BeerRepo)

// Package mrepo is a generated GoMock package.
package mrepo

import (
	context "context"
	biz "kratos-base/app/catalog/service/internal/biz"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBeerRepo is a mock of BeerRepo interface.
type MockBeerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBeerRepoMockRecorder
}

// MockBeerRepoMockRecorder is the mock recorder for MockBeerRepo.
type MockBeerRepoMockRecorder struct {
	mock *MockBeerRepo
}

// NewMockBeerRepo creates a new mock instance.
func NewMockBeerRepo(ctrl *gomock.Controller) *MockBeerRepo {
	mock := &MockBeerRepo{ctrl: ctrl}
	mock.recorder = &MockBeerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeerRepo) EXPECT() *MockBeerRepoMockRecorder {
	return m.recorder
}

// CreateBeer mocks base method.
func (m *MockBeerRepo) CreateBeer(arg0 context.Context, arg1 *biz.Beer) (*biz.Beer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBeer", arg0, arg1)
	ret0, _ := ret[0].(*biz.Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBeer indicates an expected call of CreateBeer.
func (mr *MockBeerRepoMockRecorder) CreateBeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBeer", reflect.TypeOf((*MockBeerRepo)(nil).CreateBeer), arg0, arg1)
}

// GetBeer mocks base method.
func (m *MockBeerRepo) GetBeer(arg0 context.Context, arg1 int64) (*biz.Beer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeer", arg0, arg1)
	ret0, _ := ret[0].(*biz.Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeer indicates an expected call of GetBeer.
func (mr *MockBeerRepoMockRecorder) GetBeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeer", reflect.TypeOf((*MockBeerRepo)(nil).GetBeer), arg0, arg1)
}
